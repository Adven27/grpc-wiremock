buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

apply plugin: 'com.google.protobuf'

group = 'io.adven.grpc.wiremock'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

def grpcVersion = '1.35.0'
def protobufVersion = '3.12.1'
def protocVersion = protobufVersion

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation "io.grpc:grpc-all:${grpcVersion}"
    implementation 'com.github.tomakehurst:wiremock-standalone:2.26.3'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins { grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" } }
    generateProtoTasks { all()*.plugins { grpc { outputSubDir = 'java' } } }
    generatedFilesBaseDir = 'src'
}

sourceSets.main.proto.srcDir '/proto'

task generateJava(type: Copy) {
    def decorate_services = ""
    def import_services = ""
    def services = ""
    doFirst {
        def callDecoratorTemplate = """
        private final Map<String, Class> @service@@version@RespTypes = new HashMap<>(){{
            @resp_types@
        }}; 
        @Around("execution(* @package@.@service@Grpc.@service@ImplBase.*(..))")
        public void redirect@service@@version@(ProceedingJoinPoint jp) throws Throwable { redirect(jp, "@service@@version@", @service@@version@RespTypes); }
        """
        //def importServiceTemplate = "import @package@.@service@Grpc;\n"
        def serviceTemplate = "@Service static class @service@@version@ extends @package@.@service@Grpc.@service@ImplBase {}\n"
        new FileNameFinder().getFileNames("$projectDir/src/main/java", '**/*Grpc.java').forEach {
            def file = new File(it)
            def relativePath = file.path.split("src/main/java/")[1]
            def pkg = relativePath.substring(0, relativePath.lastIndexOf("/")).replace("/", ".")
            def version = pkg.substring(pkg.lastIndexOf(".")+1)
            def srv = relativePath.substring(relativePath.lastIndexOf("/") + 1).replace("Grpc.java", "")
            println "Found $path: "
            println "Parsed package = [$pkg] and service = [$pkg.$srv]"

            def text = file.text
            def rpcMethodAnnotation = "@io.grpc.stub.annotations.RpcMethod("
            Map<String, String> respTypes = new HashMap<>()
            while (text.indexOf(rpcMethodAnnotation) >= 0) {
                def rest = text.substring(text.indexOf(rpcMethodAnnotation) + rpcMethodAnnotation.length())
                def descriptor = rest.substring(0, rest.indexOf(")")).split(',').inject([:]) { map, token ->
                    token.split('=').with { map[it[0].trim()] = it[1].trim() }
                    map
                }
                def method = descriptor.fullMethodName.substring("SERVICE_NAME + '/' + \"".length(), descriptor.fullMethodName.length() - 1)
                respTypes[method] = descriptor.responseType
                text = rest
            }
            decorate_services += callDecoratorTemplate.replace("@package@", pkg).replace("@service@", srv).replace("@version@", version)
                    .replace("@resp_types@", respTypes.collect { k, v -> "put(\"${k.toLowerCase()}\", $v);" }.join("\n"))
            //import_services += importServiceTemplate.replace("@package@", pkg).replace("@service@", srv)
            services += serviceTemplate.replace("@package@", pkg).replace("@service@", srv).replace("@version@", version)
        }
    }
    from "src/template/java"
    into "src/main/java/io/adven/grpc/wiremock"
    filter { it.replace("@import_services@", import_services).replace("@services@", services).replace("@decorate_services@", decorate_services) }
}

compileJava.dependsOn 'generateJava'
generateJava.dependsOn 'generateProto'